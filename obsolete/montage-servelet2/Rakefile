load "Rakefile.common"
require './pwrakedemo.rb'

### Default task
task :default => "shrunk.jpg"

### projection
PRJ_FITS = []
P_IMGTBL = []
P_TASK = []
rimgs = Montage.read_image_tbl(RIMAGES_TBL)
rimgs.each do |x|
  basename = File.basename(x["fname"])
  input = INPUT_DIR+"/"+basename

  pimg = "p/"+basename
  desc "mProjectPP"
  file pimg => [input,REGION_HDR] do |t|
    sh "mProjectPP #{t.prerequisites[0]} #{t.name} #{REGION_HDR}" do |ok,status|
      Montage.collect_imgtbl(t, P_IMGTBL) if ok
    end
  end
  P_TASK << pimg
end

desc "put_imgtbl"
task "pimages.tbl" => P_TASK do
  Montage.put_imgtbl(P_IMGTBL, "p", "pimages.tbl")
end

### dif & fit
DIFF_FITS=[]
FIT_TXT=[]
FIT_TBL=[]
diffs = Montage.read_overlap_tbl("diffs.tbl")
Montage.write_fittxt_tbl("fittxt.tbl", diffs)

diffs.each do |c|
  p1 = "p/"+c[2]
  p2 = "p/"+c[3]
  DIFF_FITS << dif_fit = "d/"+c[4]
  desc "mDiff"
  file dif_fit => [p1,p2,REGION_HDR] do |t|
    x1,x2,rh = t.prerequisites
    sh "mDiff #{x1} #{x2} #{t.name} #{REGION_HDR}" do |ok,status|
      Montage.fitplane(c[0..1], t, FIT_TBL) if ok
    end
  end
end

### concatfit
desc "write_fits_tbl"
task "fits.tbl" => DIFF_FITS do |t|
  Montage.write_fits_tbl(FIT_TBL, "fittxt.tbl", "fits.tbl")
end

### bg-model
desc "mBgModel"
file "corrections.tbl" => ["fits.tbl", RIMAGES_TBL] do
  sh "mBgModel #{RIMAGES_TBL} fits.tbl corrections.tbl"
end

### background correction
CORRECT_FITS=[]
C_IMGTBL=[]
rimgs.each do |x|
  src = File.basename(x["fname"])
  dst = "c/" + src
  CORRECT_FITS << dst
  desc "mBackground"
  file dst => ["p/#{src}","corrections.tbl",RIMAGES_TBL] do |t|
    sh "(cd p; mBackground -t #{src} ../#{dst} ../#{RIMAGES_TBL} ../corrections.tbl)" do |ok,status|
      Montage.collect_imgtbl(t, C_IMGTBL) if ok
    end
  end
end

desc "put_imgtbl"
task "cimages.tbl" => CORRECT_FITS do |t|
  Montage.put_imgtbl(C_IMGTBL, "c", "cimages.tbl")
end

### tile region
TILE_TBL = []
TILE_FITS = []
SHRUNK_FITS = []
S_IMGTBL = []

NY.times do |iy|
  NX.times do |ix|
    tile_hdr = "t/tile_#{ix}_#{iy}.hdr"

    TILE_TBL << tile_tbl = tile_hdr.ext('tbl')
    desc "mCoverageCheck"
    file tile_tbl => [tile_hdr,"cimages.tbl"] do |t|
      sh "mCoverageCheck cimages.tbl #{t.name} -header #{t.prerequisites[0]}"
    end
    img_tbl = Montage.read_image_tbl(tile_tbl+"_test")
    imgs = img_tbl.map{|x| "c/"+File.basename(x["fname"])}

    TILE_FITS << tile_fits = tile_hdr.ext('fits')
    desc "mAdd"
    file tile_fits => [tile_tbl,tile_hdr]+imgs do |t|
      a = t.prerequisites[0..1].join(" ")
      sh "mAdd -e -p c #{a} #{t.name} "
    end

    SHRUNK_FITS << shrunk_fits = tile_fits.sub(%r{t/(.*)\.fits}, 's/\1.fits')
    desc "mShrink"
    file shrunk_fits => [tile_fits] do |t|
      sh "mShrink #{t.prerequisites[0]} #{t.name} #{SHRINK_FACTOR}"
      Montage.collect_imgtbl(t, S_IMGTBL)
    end
  end
end

desc "put_imgtbl"
file "simages.tbl" => SHRUNK_FITS do
  Montage.put_imgtbl(S_IMGTBL, "s", "simages.tbl")
end

desc "mAdd"
file "shrunk.fits" => ["simages.tbl", SHRUNK_HDR] do |t|
  sh "mAdd -n -e -p s #{t.prerequisites.join(' ')} #{t.name}"
end

desc "mJPEG"
file "shrunk.jpg" => ["shrunk.fits"] do |t|
  sh "mJPEG -ct 0 -gray #{t.prerequisites[0]} -0s '99.8%' gaussian -out #{t.name}"
end
